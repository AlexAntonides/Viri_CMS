/// @author Alex Antonides <{@link http://www.alex-antonides.com/}>
/// @license     {@link https://github.com/AlexAntonides/Viri_UI/blob/master/LICENSE}
/// @ignore

/// ##
/// === Functions ===
/// ##       
@function create-shadow ( $direction, $length, $color, $fade: false, $shadow-count: 100  ) {
    $shadows: ();
    $conversion-map: (
      to top: 180deg,
      to top right: 135deg,
      to right top: 135deg,
      to right: 90deg,
      to bottom right: 45deg,
      to right bottom: 45deg,
      to bottom: 0deg,
      to bottom left: 315deg,
      to left bottom: 315deg,
      to left: 270deg,
      to left top: 225deg,
      to top left: 225deg
    );
  
    @if map-has-key($conversion-map, $direction) {
      $direction: map-get($conversion-map, $direction);
    }
  
    @for $i from 1 through $shadow-count {
      $current-step: ($i * $length / $shadow-count);
      $current-color: if(not $fade, $color, if(type-of($fade) == 'color',  mix($fade, $color, ($i / $shadow-count * 100)), rgba($color, 1 - $i / $shadow-count)));
  
      $shadows: append($shadows, (sin(0deg + $direction) * $current-step) (cos(0deg + $direction) * $current-step) 0 $current-color, 'comma');
    }
  
    @return $shadows;
}

/// ##
/// === Mixins ===
/// ##       

@mixin transition($transition...) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}

@mixin transition-property($property...) {
  -moz-transition-property:    $property;
  -o-transition-property:      $property;
  -webkit-transition-property: $property;
  transition-property:         $property;
}

@mixin transition-duration($duration...) {
  -moz-transition-property:    $duration;
  -o-transition-property:      $duration;
  -webkit-transition-property: $duration;
  transition-property:         $duration;
}

@mixin transition-timing-function($timing...) {
  -moz-transition-timing-function:    $timing;
  -o-transition-timing-function:      $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function:         $timing;
}

@mixin transition-delay($delay...) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}

@mixin box-shadow( $shadow... ) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow:  $shadow;
    box-shadow:  $shadow;
}

/// ##
/// — Media Queries —
/// ##

@function media-get-next($key, $list: $screen-types) {
  $names: map-keys($list);
  $next: index($names, $key);
  @return if($next < length($names), nth($names, $next + 1), null);
}

@function media-get-min($key, $list: $screen-types) {
  $min: map-get($list, $key);
  @return if($min != 0, $min, null);
}

@function media-get-max($key, $list: $screen-types) {
  $max: media-get-next($key, $list);
  @return if($max, media-get-min($max, $list) - 1px, null);
}

@mixin media-breakpoint-min($key, $list: $screen-types) {
  $min: media-get-min($key, $list);
  @if $min {
      @media (min-width: $min) {
          @content;
      }
  } @else {
      @content;
  }
}

@mixin media-breakpoint-between($lower, $upper, $list: $screen-types) {
  $min: media-get-min($lower, $list);
  $max: media-get-min($upper, $list);

  @media (min-width: $min) and (max-width: $max) {
      @content;
  }
}

@mixin media-breakpoint-max($key, $list: $screen-types) {
  $max: media-get-max($key, $list);
  @if $max {
      @media (max-width: $max) {
          @content;
      }
  } @else {
      @content;
  }
}